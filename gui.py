# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt6 UI code generator 6.4.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets

from datahandler import open_files, load
from plot import MplCanvas, MplWidget
from PCA import Calculate_PCA

import re
import os

class Window(QtWidgets.QMainWindow):
    '''Main Window.'''
    def __init__(self, parent=None):
        '''Initializer.'''
        super().__init__(parent)
        self.setWindowTitle("VOC Tool")
        self.resize(800, 600)
        self.setFixedSize(800, 600)

        self.centralwidget = QtWidgets.QWidget(self)
        self.centralwidget.setObjectName("centralwidget")

        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(0, 0, 800, 600))
        self.tabWidget.setObjectName("tabWidget")
        self.tabWidget.setMovable(True)

        self.setCentralWidget(self.centralwidget)

        self.menubar = QtWidgets.QMenuBar(self)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")

        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")

        self.menuSettings = QtWidgets.QMenu(self.menubar)
        self.menuSettings.setObjectName("menuSettings")

        self.menuWindow = QtWidgets.QMenu(self.menubar)
        self.menuWindow.setObjectName("menuWindow")

        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")

        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")

        self.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(self)
        self.statusbar.setObjectName("statusbar")

        self.setStatusBar(self.statusbar)

        self.actionOpen = QtGui.QAction(self)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("icons/icons/folder-open-document.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen.setIcon(icon)
        self.actionOpen.setObjectName("actionOpen")
        self.actionOpen.triggered.connect(self.openfile)

        self.actionOpen_folder = QtGui.QAction(self)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("icons/icons/folder-open.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionOpen_folder.setIcon(icon3)
        self.actionOpen_folder.setObjectName("actionOpen_folder")
        self.actionOpen_folder.triggered.connect(self.openfolder)

        self.actionQuit = QtGui.QAction(self)
        self.actionQuit.setObjectName("actionQuit")
        self.actionQuit.triggered.connect(self.close)

        self.actionMinimise = QtGui.QAction(self)
        self.actionMinimise.setObjectName("actionMinimise")
        self.actionMinimise.triggered.connect(self.showMinimized)

        self.actionAnnotate = QtGui.QAction(self)
        self.actionAnnotate.setObjectName("actionAnnotate")
        self.actionAnnotate.setCheckable(True)
        self.actionAnnotate.setChecked(True)
        self.actionAnnotate.triggered.connect(self.annotate)
        self.annotate = True


        self.actionShowwait = QtGui.QAction(self)
        self.actionShowwait.setObjectName("actionShowwait")
        self.actionShowwait.setCheckable(True)
        self.actionShowwait.triggered.connect(self.show_wait)
        self.showwait = False

        #self.actionExport_to_excel = QtGui.QAction(self)
        #icon1 = QtGui.QIcon()
        #icon1.addPixmap(QtGui.QPixmap("icons/icons/document-excel-table.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        #self.actionExport_to_excel.setIcon(icon1)
        #self.actionExport_to_excel.setObjectName("actionExport_to_excel")

        self.actionDelete_all_imports = QtGui.QAction(self)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("icons/icons/table--minus.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionDelete_all_imports.setIcon(icon2)
        self.actionDelete_all_imports.setObjectName("actionDelete_all_imports")
        self.actionDelete_all_imports.triggered.connect(self.deleteimports)

        self.actionPreferences = QtGui.QAction(self)
        self.actionPreferences.setObjectName("actionPreferences")

        self.actionHelp = QtGui.QAction(self)
        self.actionHelp.setObjectName("actionHelp")

        self.actionLicense = QtGui.QAction(self)
        self.actionLicense.setObjectName("actionLicense")

        self.noneLabel = QtWidgets.QLabel(self, text='No data found.\nGo to File -> Open... to get started.')
        self.noneLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.noneLabel.setGeometry(QtCore.QRect(300, 200, 200, 200))
        self.noneLabel.setObjectName("None Label")

        self.menuFile.addAction(self.actionOpen)
        self.menuFile.addAction(self.actionOpen_folder)
        self.menuFile.addSeparator()
        #self.menuFile.addAction(self.actionExport_to_excel)
        self.menuFile.addAction(self.actionDelete_all_imports)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionQuit)

        self.menuView.addAction(self.actionAnnotate)
        self.menuView.addAction(self.actionShowwait)

        self.menuSettings.addAction(self.actionPreferences)

        self.menuWindow.addAction(self.actionMinimise)
        self.menuHelp.addAction(self.actionHelp)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionLicense)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuWindow.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.data = load()
        #self.data = {}
        self.tabs = {}
        self.tabSliders = {}
        self.tabDaySpin = {}
        self.tabRepeatSpin = {}
        self.tabPlot = {}
        self.vals = {}
        self.tabLabel = {}
        self.tabButton = {}
        self.min_repeats = {}
        self.max_repeats = {}

        for key in self.data:
            self.tabs[key] = QtWidgets.QWidget()
            self.tabs[key].setObjectName(key)
            self.tabs[key].pen = key
            self.tabWidget.addTab(self.tabs[key], "")

            self.noneLabel.setText("")


        for key, tab in self.tabs.items():


            temp = re.split("pen", key, flags=re.IGNORECASE)
            room = str(temp[1].strip()[0])
            title = f"Room {room} sensor data"

            self.tabPlot[key] = MplWidget(tab)
            self.tabPlot[key].canvas.ax.plot([0,1,2,3,4], [10,1,20,3,40])
            self.tabPlot[key].setGeometry(QtCore.QRect(-30, 0, 680, 500))
            self.tabPlot[key].setObjectName(key + " plot")
            self.tabPlot[key].canvas.setTitle(title)

            self.tabSliders[key] = QtWidgets.QSlider(tab)
            self.tabSliders[key].setGeometry(QtCore.QRect(50, 500, 500, 20))
            self.tabSliders[key].setOrientation(QtCore.Qt.Orientation.Horizontal)
            self.tabSliders[key].setObjectName(key + " slider")

            self.vals[key] = []
            #for day in self.data[key]:
            #    for repeat in self.data[key][day]:
            #        self.vals.append([day, repeat])

            for day in range(0,30):
                for repeat in range(0, 5):
                    if self.data[key].get(day):
                        if self.data[key][day].get(repeat):
                            self.vals[key].append([day, repeat])

            max_day = self.vals[key][len(self.vals[key])-1][0]

            for repeat in range(0,5):
                if self.data[key].get('water'):
                    if self.data[key]['water'].get(repeat):
                        self.vals[key].append(['water', repeat])

            self.min_repeats[key] = {}
            self.max_repeats[key] = {}
            for day, repeat in self.vals[key]:
                if not self.min_repeats[key].get(day):
                    self.min_repeats[key][day] = repeat
                if not self.max_repeats[key].get(day) or self.max_repeats[key].get(day) < repeat:
                    self.max_repeats[key][day] = repeat

            #for day in self.min_repeats[key].keys():
            #    print(day, self.min_repeats[key][day], self.max_repeats[key][day])



            self.tabSliders[key].setRange(0, (len(self.vals[key])-1))
            self.tabSliders[key].setSingleStep(1)
            self.tabSliders[key].setValue(0)              
            self.tabSliders[key].setTickPosition(QtWidgets.QSlider.TickPosition.TicksAbove)
            self.tabSliders[key].setTickInterval(1)
            self.tabSliders[key].valueChanged.connect(self.slider_change)

            self.tabDaySpin[key] = QtWidgets.QSpinBox(tab)
            self.tabDaySpin[key].setGeometry(QtCore.QRect(560, 500, 60, 20))
            self.tabDaySpin[key].setObjectName(key + " daySpin")
            self.tabDaySpin[key].setRange(self.vals[key][0][0]-1, max_day)
            self.tabDaySpin[key].setPrefix('Day ')
            self.tabDaySpin[key].setValue(self.vals[key][0][0])
            self.tabDaySpin[key].setSpecialValueText('Water')
            self.tabDaySpin[key].valueChanged.connect(self.day_spin_change)

            self.tabRepeatSpin[key] = QtWidgets.QSpinBox(tab)
            self.tabRepeatSpin[key].setGeometry(QtCore.QRect(630, 500, 70, 20))
            self.tabRepeatSpin[key].setObjectName(key + " repeatSpin")
            self.tabRepeatSpin[key].setRange(self.min_repeats[key][self.vals[key][0][0]], self.max_repeats[key][self.vals[key][0][0]])
            self.tabRepeatSpin[key].setPrefix('Repeat ')
            self.tabRepeatSpin[key].setValue(self.vals[key][0][1])
            self.tabRepeatSpin[key].valueChanged.connect(self.repeat_spin_change)

            self.tabLabel[key] = QtWidgets.QLabel(tab)
            self.tabLabel[key].setGeometry(QtCore.QRect(585, 50, 200, 450))
            self.tabLabel[key].setObjectName(key + " label")

            self.tabButton[key] = QtWidgets.QPushButton("Show Sensor PCA", tab)
            self.tabButton[key].setGeometry(QtCore.QRect(60, 463, 110, 25))
            self.tabButton[key].setObjectName(key + " button")
            self.tabButton[key].clicked.connect(self.show_pca)

            

            self.update_plot(key, self.vals[key][0][0], self.vals[key][0][1])


        self.retranslateUi()
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(self)

    def show_pca(self):
        pen = self.tabWidget.currentWidget().pen
        day = self.tabDaySpin[pen].value()
        repeat = self.tabRepeatSpin[pen].value()

        pca = Calculate_PCA(self.data[pen][day][repeat])

    def slider_change(self):
        val = self.sender().value()
        pen = self.tabWidget.currentWidget().pen
        day, repeat = self.vals[pen][val]
        self.tabRepeatSpin[pen].setValue(repeat)
        self.tabRepeatSpin[pen].setRange(self.min_repeats[pen][day], self.max_repeats[pen][day])
        if isinstance(day, int):
            self.tabDaySpin[pen].setValue(day)
        else:
            self.tabDaySpin[pen].setValue(-1)
        self.update_plot(pen, day, repeat)


    def day_spin_change(self):
        day = self.sender().value()
        if day < 1:
            day = 'water'
        pen = self.tabWidget.currentWidget().pen
        repeat = self.tabRepeatSpin[pen].value()
        if self.min_repeats[pen].get(day) and self.max_repeats[pen].get(day):
            self.tabRepeatSpin[pen].setRange(self.min_repeats[pen][day], self.max_repeats[pen][day])
        try:
            val = self.vals[pen].index([day, repeat])
            self.tabSliders[pen].setValue(val)
        except ValueError:
            print("ValueError")
            pass

    def repeat_spin_change(self):
        repeat = self.sender().value()
        pen = self.tabWidget.currentWidget().pen
        day = self.tabDaySpin[pen].value()
        if day < 1:
            day = 'water'
        try:
            val = self.vals[pen].index([day, repeat])
            self.tabSliders[pen].setValue(val)
        except ValueError:
            print("ValueError")
            pass


    def update_plot(self, pen=None, day=None, repeat=None):
        if pen == None:
            pen = self.tabWidget.currentWidget().pen
        if day == None:
            day = self.tabDaySpin[pen].value()
        if repeat == None:
            repeat = self.tabRepeatSpin[pen].value()

        test = self.data[pen][day][repeat]
        text = "Details:\n" + ''.join(test.details)
        text = text + f"\nTime & Date: {test.time} {test.date}\nName: {test.name}\n"
        text = text + f"Repeat: {test.repeats[0]}/{test.repeats[1]}\n\nBaseline: {test.baseline}\n"
        text = text + f"Absorb: {test.absorb}\nPause: {test.pause}\nDesorb: {test.desorb}\n"
        text = text + f"Flush: {test.flush}\nWait: {test.wait}\nHigh Flow: {test.hflow}\n"
        text = text + f"Medium Flow: {test.mflow}\nLow Flow: {test.lflow}\nProfile Time: {test.profiletime}\n"
        text = text + f"Data Rate: {test.datarate}\nData Total: {test.datatotal}\nNumber of Sensors: {test.sensors}"

        self.tabLabel[pen].setText(text)
        self.tabPlot[pen].update_plot(test, self.annotate, self.showwait)

        #self.tabPlot[pen].savefigure()

    def retranslateUi(self):
        ''
        _translate = QtCore.QCoreApplication.translate
        self.setWindowTitle(_translate("MainWindow", "VOC Tool"))

        for key, tab in self.tabs.items():
            temp = re.split("pen", key, flags=re.IGNORECASE)
            room = temp[1].strip()[0]
            self.tabWidget.setTabText(self.tabWidget.indexOf(tab), _translate("MainWindow", ("Room " + room)))
        
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings"))
        self.menuWindow.setTitle(_translate("MainWindow", "Window"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuView.setTitle(_translate("MainWindow", "View"))

        self.actionOpen.setText(_translate("MainWindow", "Open file..."))
        self.actionOpen.setToolTip(_translate("MainWindow", "Open a .txt or .zip file."))
        self.actionOpen.setShortcut(_translate("MainWindow", "Ctrl+O"))

        self.actionQuit.setText(_translate("MainWindow", "Quit"))
        self.actionQuit.setShortcut(_translate("MainWindow", "Ctrl+Q"))

        self.actionMinimise.setText(_translate("MainWindow", "Minimize"))
        self.actionMinimise.setShortcut(_translate("MainWindow", "Ctrl+M"))

        self.actionAnnotate.setText(_translate("MainWindow", "Annotate Graph"))
        self.actionAnnotate.setShortcut(_translate("MainWindow", "Ctrl+A"))

        self.actionShowwait.setText(_translate("MainWindow", "Show Wait Period"))

        #self.actionExport_to_excel.setText(_translate("MainWindow", "Export to Excel (WIP)"))
        self.actionDelete_all_imports.setText(_translate("MainWindow", "Delete Imported Data"))

        self.actionPreferences.setText(_translate("MainWindow", "Preferences..."))
        self.actionPreferences.setShortcut(_translate("MainWindow", "Ctrl+P"))

        self.actionOpen_folder.setText(_translate("MainWindow", "Open folder..."))
        self.actionOpen_folder.setShortcut(_translate("MainWindow", "Ctrl+Shift+O"))

        self.actionHelp.setText(_translate("MainWindow", "Help"))
        self.actionHelp.setShortcut(_translate("MainWindow", "Ctrl+?"))

        self.actionLicense.setText(_translate("MainWindow", "About"))

    def openfile(self):
        fname = QtWidgets.QFileDialog.getOpenFileNames(
            self, 
            'Open file', 
            "", 
            "Data files (*.txt *.zip)",
        )
        open_files(fname[0])
        self.close()
        self.__init__()
        self.show()

    def openfolder(self):
        folder = QtWidgets.QFileDialog.getExistingDirectory(self, 'Select folder')
        if not folder:
            return
        folder += '/'

        fnames = os.listdir(folder)

        longfnames = [folder + file for file in fnames]
        open_files(longfnames)
        self.close()
        self.__init__()
        self.show()

    def deleteimports(self):
        text = f"Are you sure you want to continue and remove all imported data?\nThis includes {len(os.listdir('data'))} data files."
        msg = QtWidgets.QMessageBox(text=text, parent=self)
        msg.setIcon(QtWidgets.QMessageBox.Icon.Warning)
        msg.setStandardButtons(QtWidgets.QMessageBox.StandardButton.Yes | QtWidgets.QMessageBox.StandardButton.Cancel)
        msg.buttonClicked.connect(self.output)
        ret = msg.exec()

    def output(self, button):
        if button.text() == '&Yes':
            files = os.listdir('data')
            for file in files:
                file = 'data/' + file
                if os.path.isfile(file):
                    os.remove(file)

            msg = QtWidgets.QMessageBox(text="Data files deleted successfully.", parent=self)
            msg.setIcon(QtWidgets.QMessageBox.Icon.Information)

            ret2 = msg.exec()

            self.close()
            self.__init__()
            self.show()

    def show_wait(self, action):
        self.showwait = action
        self.update_plot()

    def annotate(self, action):
        self.annotate = action
        self.update_plot()

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    win = Window()
    win.show()

    sys.exit(app.exec())
